def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    namespace 'com.crzgames.rc2d'
    ndkVersion '26.3.11579264'
    buildToolsVersion '34.0.0'
    compileSdk 34
    defaultConfig {
        if (buildAsApplication) {
            applicationId 'com.crzgames.rc2d'
        }
        minSdkVersion 23
        targetSdkVersion 34
        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                version '3.22.1'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
                version '3.22.1'
            }
        }
       
    }
    sourceSets {
        main {
            assets {
                srcDirs 'src/main/assets'
            }
        }
    }
    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "com.crzgames.rc2d.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'jni/jar')
}
